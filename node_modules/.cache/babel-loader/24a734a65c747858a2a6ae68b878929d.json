{"ast":null,"code":"var _jsxFileName = \"/home/gramacho/workspace/testes/desafioBuilders/getWeather/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport Keys from \"./keys\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport CardWeather from \"./shared/components/weather/CardWeather\";\nimport WeatherInfo from \"./shared/components/weather/WeatherInfo\";\nimport CardAddress from \"./shared/components/address/CardAddress\";\nimport Spinner from \"./shared/components/spinner/Spinner\";\nimport locationService from \"./shared/services/location.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [address, setAddress] = useState();\n  const [weather, setWeather] = useState();\n  const [loading, setLoading] = useState(false);\n  const [location, setLocation] = useState();\n  useEffect(() => {\n    locationService.getLocation();\n  }, []);\n  useEffect(() => {\n    setLoading(true);\n\n    if (location.loaded) {\n      Axios.get(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + location.coords.lat + \",\" + location.coords.lng + \"&key=\" + Keys.google).then(response => {\n        setAddress(response.data.results[0].formatted_address);\n      });\n      Axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + location.coords.lat + \"&lon=\" + location.coords.lng + \"&appid=\" + Keys.openWeather + \"&lang=pt_br&units=metric\").then(response => {\n        setWeather(response.data);\n        setLoading(false);\n      });\n    }\n  }, [location]);\n\n  const refreshLocation = () => {\n    setLocation({\n      loaded: false,\n      error: '',\n      coords: {\n        lat: 0,\n        lng: 0\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Updated local weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshLocation,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardAddress, {\n      title: \"Address\",\n      address: address ? address : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Cards\",\n      children: [/*#__PURE__*/_jsxDEV(CardWeather, {\n        title: \"Local date time\",\n        children: [/*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Date\",\n          data: weather ? new Date(weather.dt * 1000).toLocaleDateString() : new Date().toLocaleDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Time\",\n          data: weather ? new Date(weather.dt * 1000).toLocaleTimeString() : new Date().toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Sunrise\",\n          data: weather ? new Date(weather.sys.sunrise * 1000).toLocaleTimeString() : new Date().toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Sunset\",\n          data: weather ? new Date(weather.sys.sunset * 1000).toLocaleTimeString() : new Date().toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardWeather, {\n        title: \"Temperature\",\n        children: [/*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Temperature\",\n          data: weather ? weather.main.temp.toFixed(0) : \"\",\n          metric: \" \\xB0C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Minimum\",\n          data: weather ? weather.main.temp_min.toFixed(0) : \"\",\n          metric: \" \\xB0C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Maximum\",\n          data: weather ? weather.main.temp_max.toFixed(0) : \"\",\n          metric: \" \\xB0C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Thermal sensation\",\n          data: weather ? weather.main.feels_like.toFixed(0) : \"\",\n          metric: \" \\xB0C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardWeather, {\n        title: \"Atmosphere\",\n        children: [/*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Humidity\",\n          data: weather ? weather.main.humidity.toString() : \"0\",\n          metric: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Pressure\",\n          data: weather ? weather.main.pressure.toString() : \"0\",\n          metric: \" hPa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          title: \"Wind\",\n          data: weather ? (weather.wind.speed * 3.6).toFixed(0) : \"0\",\n          metric: \" km/h\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"K0/PP9ycGaNjaofbN61KAFksP+8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gramacho/workspace/testes/desafioBuilders/getWeather/src/App.tsx"],"names":["Keys","useState","useEffect","Axios","CardWeather","WeatherInfo","CardAddress","Spinner","locationService","App","address","setAddress","weather","setWeather","loading","setLoading","location","setLocation","getLocation","loaded","get","coords","lat","lng","google","then","response","data","results","formatted_address","openWeather","refreshLocation","error","Date","dt","toLocaleDateString","toLocaleTimeString","sys","sunrise","sunset","main","temp","toFixed","temp_min","temp_max","feels_like","humidity","toString","pressure","wind","speed"],"mappings":"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","sourcesContent":["import Keys from \"./keys\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport CardWeather from \"./shared/components/weather/CardWeather\";\nimport WeatherInfo from \"./shared/components/weather/WeatherInfo\";\nimport CardAddress from \"./shared/components/address/CardAddress\";\nimport Spinner from \"./shared/components/spinner/Spinner\";\nimport locationService from \"./shared/services/location.service\";\nimport ILocation from \"./shared/interfaces/location\";\n\ninterface WeatherClass {\n  main: {\n    humidity: number;\n    feels_like: number;\n    temp: number;\n    temp_max: number;\n    temp_min: number;\n    pressure: number;\n  };\n  wind: {\n    speed: number;\n  };\n  sys: {\n    sunrise: number;\n    sunset: number;\n  };\n  dt: number;\n}\n\nconst App = () => {\n  const [address, setAddress] = useState<string>();\n  const [weather, setWeather] = useState<WeatherClass>();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [location, setLocation] = useState<ILocation>();\n\n  useEffect(() => {\n    locationService.getLocation()\n  }, []);\n\n  useEffect(() => {\n      setLoading(true);\n  \n      if (location!.loaded) {\n        Axios.get(\n          \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" +\n            location!.coords.lat +\n            \",\" +\n            location!.coords.lng +\n            \"&key=\" +\n            Keys.google\n        ).then((response) => {\n          setAddress(response.data.results[0].formatted_address);\n        });\n        Axios.get(\n          \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n            location!.coords.lat +\n            \"&lon=\" +\n            location!.coords.lng +\n            \"&appid=\" +\n            Keys.openWeather +\n            \"&lang=pt_br&units=metric\"\n        ).then((response) => {\n          setWeather(response.data);\n  \n          setLoading(false);\n        });\n      }\n  }, [location]);\n\n  const refreshLocation = () => {\n    setLocation({\n      loaded: false,\n      error: '',\n      coords: {\n        lat: 0,\n        lng: 0,\n      },\n    })\n  };\n  return (\n    <div className=\"App\">\n      <h1>Updated local weather</h1>\n\n      <button onClick={refreshLocation}>Refresh</button>\n\n      <CardAddress title=\"Address\" address={address ? address : \"\"} />\n\n      <div className=\"Cards\">\n        <CardWeather title=\"Local date time\">\n          <WeatherInfo\n            title=\"Date\"\n            data={\n              weather\n                ? new Date(weather.dt * 1000).toLocaleDateString()\n                : new Date().toLocaleDateString()\n            }\n          />\n          <WeatherInfo\n            title=\"Time\"\n            data={\n              weather\n                ? new Date(weather.dt * 1000).toLocaleTimeString()\n                : new Date().toLocaleTimeString()\n            }\n          />\n          <WeatherInfo\n            title=\"Sunrise\"\n            data={\n              weather\n                ? new Date(weather.sys.sunrise * 1000).toLocaleTimeString()\n                : new Date().toLocaleTimeString()\n            }\n          />\n          <WeatherInfo\n            title=\"Sunset\"\n            data={\n              weather\n                ? new Date(weather.sys.sunset * 1000).toLocaleTimeString()\n                : new Date().toLocaleTimeString()\n            }\n          />\n        </CardWeather>\n\n        <CardWeather title=\"Temperature\">\n          <WeatherInfo\n            title=\"Temperature\"\n            data={weather ? weather.main.temp.toFixed(0) : \"\"}\n            metric=\" °C\"\n          />\n          <WeatherInfo\n            title=\"Minimum\"\n            data={weather ? weather.main.temp_min.toFixed(0) : \"\"}\n            metric=\" °C\"\n          />\n          <WeatherInfo\n            title=\"Maximum\"\n            data={weather ? weather.main.temp_max.toFixed(0) : \"\"}\n            metric=\" °C\"\n          />\n          <WeatherInfo\n            title=\"Thermal sensation\"\n            data={weather ? weather.main.feels_like.toFixed(0) : \"\"}\n            metric=\" °C\"\n          />\n        </CardWeather>\n\n        <CardWeather title=\"Atmosphere\">\n          <WeatherInfo\n            title=\"Humidity\"\n            data={weather ? weather.main.humidity.toString() : \"0\"}\n            metric=\"%\"\n          />\n          <WeatherInfo\n            title=\"Pressure\"\n            data={weather ? weather.main.pressure.toString() : \"0\"}\n            metric=\" hPa\"\n          />\n          <WeatherInfo\n            title=\"Wind\"\n            data={weather ? (weather.wind.speed * 3.6).toFixed(0) : \"0\"}\n            metric=\" km/h\"\n          />\n        </CardWeather>\n\n        <Spinner loading={loading} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}